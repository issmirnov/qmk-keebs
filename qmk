#!/usr/bin/env python3


import argparse
import json
import os
import shutil
import subprocess
import sys
import time

import visualizer


def abs_path(*paths):
    dirname = os.path.abspath(os.path.dirname(__file__))
    return os.path.join(dirname, *paths)


class QmkBuilder(object):
    def __init__(self, keyboard):
        config_root = abs_path(keyboard)
        with open(os.path.join(config_root, "config.json")) as f:
            self.config = json.load(f)

        self.qmk_root = abs_path("qmk_firmware")

        self.local_config_dir = config_root
        self.qmk_config_dir = os.path.join(
            self.qmk_root, "keyboards", self.config["path"], "keymaps", "mnye")

        self.local_user_dir = abs_path("user")
        self.qmk_user_dir = os.path.join(self.qmk_root, "users", "mnye")

    def _cleanup(self):
        if os.path.exists(self.qmk_config_dir):
            shutil.rmtree(self.qmk_config_dir)
        if os.path.exists(self.qmk_user_dir):
            shutil.rmtree(self.qmk_user_dir)

    def __enter__(self):
        self._cleanup()
        shutil.copytree(self.local_config_dir, self.qmk_config_dir)
        shutil.copytree(self.local_user_dir, self.qmk_user_dir)
        return self

    def execute(self, cmd):
        subprocess.check_call(cmd, cwd=self.qmk_root)

    def build(self):
        cmd = ["make", "{}:mnye".format(self.config["target"])]
        self.execute(cmd)

    def push(self):
        cmd = ["make", "{}:mnye:{}".format(
            self.config["target"], self.config["flash_tool"])]
        self.execute(cmd)

    def __exit__(self, *_):
        self._cleanup()


def build(keyboard):
    with QmkBuilder(keyboard) as builder:
        builder.build()


def push(keyboard):
    with QmkBuilder(keyboard) as builder:
        builder.push()


def show(keyboard):
    visualizer.visualize(abs_path("user"), abs_path(keyboard))


def main(argv):
    parser = argparse.ArgumentParser(description="Build util for QMK")
    parser.add_argument("command", nargs=1, choices=["build", "push", "show"])
    parser.add_argument("keyboard", nargs=1)
    args = parser.parse_args()

    keyboard = args.keyboard[0].strip("/")
    if not os.path.isdir(abs_path(keyboard)):
        print("Invalid keyboard: {}".format(keyboard))
        return 1

    try:
        command = args.command[0]
        if command == "build":
            build(keyboard)
        elif command == "push":
            push(keyboard)
        elif command == "show":
            show(keyboard)
    except KeyboardInterrupt:
        print()
        print("Aborting.")


if __name__ == "__main__":
    sys.exit(main(sys.argv))
